@page

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@model CartCheckoutModel
@{
    ViewData["Title"] = "Checkout";
    ViewData["ReturnURL"] = Url.Page("/Cart/CartCheckout");
    ViewData["PreOrder"] = Model.IsPreOrder;
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-page="/Cart/CartView">Cart</a></li>
        <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
    </ol>
</nav>

@using (Html.BeginForm("CartCheckout", "CartCheckout", FormMethod.Post, new { @id = "cart_checkout", @class = "block-form-submit" }))
{
<div class="form-row">

    <div class="col-md-6">
        <strong>@Html.Label("Your contact information:")</strong>
        <div class="form-row">
            <div class="form-group col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-pencil fa-fw" aria-hidden="true" title="Name"></i></div>
                    </div>
                    @Html.TextBoxFor(m => m.ProductOrder.ContactName, new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "101" })
                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.ContactName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-envelope-o fa-fw" aria-hidden="true" title="Email address"></i></div>
                    </div>
                    @Html.TextBoxFor(m => m.ProductOrder.ContactEmail, new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "102" })
                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.ContactEmail, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-mobile fa-fw" aria-hidden="true" title="Phone number"></i></div>
                    </div>
                    @Html.TextBoxFor(m => m.ProductOrder.ContactPhone, new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "103" })
                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.ContactPhone, "", new { @class = "text-danger" })
            </div>
        </div>

        <strong>@Html.Label("Payment method:")</strong>
        <div class="form-row">
            <div class="form-group col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-money fa-fw" aria-hidden="true" title="Payment method"></i></div>
                    </div>


                    @if (Model.IsPreOrder)
                    {
                        @Html.DropDownListFor(m => m.ProductOrder.PaymentMethod,
                                              Model.PaymentMethodOptions,
                                              "",
                                              new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "104", @disabled = "on" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.ProductOrder.PaymentMethod,
                                              Model.PaymentMethodOptions,
                                              "",
                                              new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "104" })
                    }

                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.PaymentMethod, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.IsPreOrder)
        {
    <div class="alert alert-info" role="alert">
        <i class="fa fa-info-circle" aria-hidden="true"></i> <strong>Note:</strong> pre-orders require a bank transfer payment in advance. Transfer details will be sent after placing an order. <br /><br />  Following these steps will allow you to pickup your order without waiting in line.
    </div>
        }

    </div>


    <div class="col-md-6">
        @if (!Model.IsPreOrder)
        {
            <strong>@Html.Label("Pickup (from the bakery):")</strong> <a asp-page="/Bakery">View map</a>
            <div class="form-row">
                <div class="form-group col">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text"><i class="fa fa-calendar fa-fw" aria-hidden="true" title="Pickup date"></i></div>
                        </div>

                        @if (Model.BusinessSettings.PickupEnabled)
                        {
                            @Html.TextBoxFor(m => m.ProductOrder.PickupDate, "{0:yyyy-MM-dd}", new { @id = "pickup_date", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @placeholder = "Pickup date", @tabindex = "105" })
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.ProductOrder.PickupDate, "{0:yyyy-MM-dd}", new { @id = "pickup_date", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @placeholder = "Pickup date", @tabindex = "105", disabled = "on" })
                        }

                    </div>
                    @Html.ValidationMessageFor(m => m.ProductOrder.PickupDate, "", new { @class = "text-danger" })
                    @Html.ValidationMessage("Validation.DeliveryOrPickup", "", new { @class = "text-danger" }, "")
                    @Html.ValidationMessage("Validation.PickupDayOfWeek", "", new { @class = "text-danger" }, "")
                    @Html.ValidationMessage("Validation.PickupDateInPast", "", new { @class = "text-danger" }, "")
                </div>
                <div class="form-group col">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text"><i class="fa fa-clock-o fa-fw" aria-hidden="true" title="Pickup time"></i></div>
                        </div>
                        @if (Model.BusinessSettings.PickupEnabled)
                        {
                            @Html.TextBoxFor(m => m.ProductOrder.PickupTime, new { @id = "pickup_time", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "106" })
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.ProductOrder.PickupTime, new { @id = "pickup_time", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "106", disabled = "on" })
                        }

                    </div>
                    @Html.ValidationMessageFor(m => m.ProductOrder.PickupTime, "", new { @class = "text-danger" })
                    @Html.ValidationMessage("Validation.PickupTimeRequired", "", new { @class = "text-danger" }, "")
                </div>
            </div>

            <div class="form-row d-flex justify-content-center text-muted">
                <h4 class="m-0">
                    --- OR ---
                </h4>
            </div>
        }


        @if (!Model.BusinessSettings.DeliveryEnabled && !Model.IsPreOrder)
        {
            <div class="alert alert-info" role="alert">
                <i class="fa fa-info-circle" aria-hidden="true"></i> Delivery is currently disabled
            </div>
        }

        <strong>@Html.Label("Deliver to:")</strong>
        <div class="form-row">
            @if (Model.BusinessSettings.DeliveryEnabled && !Model.IsPreOrder)
            {
                <div class="mb-2">
                    <span class="badge badge-pill badge-info">Mount Victoria</span>
                    <span class="badge badge-pill badge-info">Newtown</span>
                    <span class="badge badge-pill badge-info">Oriental Bay</span>
                    <span class="badge badge-pill badge-info">Te Aro</span>
                    <span class="badge badge-pill badge-info">Thorndon</span>
                    <span class="badge badge-pill badge-info">Wellington Central</span>
                </div>
            }

            <div class="form-group col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-calendar fa-fw" aria-hidden="true" title="Deliver date"></i></div>
                    </div>

                    @if (Model.BusinessSettings.DeliveryEnabled)
                    {
                        @Html.TextBoxFor(m => m.ProductOrder.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "delivery_date", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @placeholder = "Deliver date", @tabindex = "107" })
                    }
                    else if (Model.IsPreOrder)
                    {
                        @Html.TextBoxFor(m => m.ProductOrder.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "delivery_date_preorder", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @placeholder = "Deliver date", @tabindex = "107" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.ProductOrder.DeliveryDate, "{0:yyyy-MM-dd}", new { @id = "delivery_date", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @placeholder = "Deliver date", @tabindex = "107", disabled = "on" })
                    }

                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.DeliveryDate, "", new { @class = "text-danger" })
                @Html.ValidationMessage("Validation.DeliveryOrPickup", "", new { @class = "text-danger" }, "")
                @Html.ValidationMessage("Validation.DeliveryDayOfWeek", "", new { @class = "text-danger" }, "")
                @Html.ValidationMessage("Validation.DeliveryDateInPast", "", new { @class = "text-danger" }, "")
                @Html.ValidationMessage("Validation.DeliveryMinNotMet", "", new { @class = "text-danger" }, "")

            </div>
            <div class="form-group col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-clock-o fa-fw" aria-hidden="true" title="Deliver time"></i></div>
                    </div>

                    @Html.TextBoxFor(m => m.ProductOrder.DeliveryTime, new { @id = "delivery_time", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "108", disabled = "on" })

                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.DeliveryTime, "", new { @class = "text-danger" })
                @Html.ValidationMessage("Validation.DeliveryTimeRequired", "", new { @class = "text-danger" }, "")
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-map-marker fa-fw" aria-hidden="true" title="Delivery address"></i></div>
                    </div>

                    @if (Model.BusinessSettings.DeliveryEnabled && !Model.IsPreOrder)
                    {
                        @Html.TextBoxFor(m => m.Full_Address, new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @id = "delivery_address", @placeholder = "Enter the address to deliver", @tabindex = "109" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Full_Address, new { @class = "form-control", autocomplete = "off", autofocus = "autofocus", @id = "delivery_address", @placeholder = "Enter the address to deliver", @tabindex = "109", disabled = "on" })
                    }


                </div>
                @Html.ValidationMessage("Address.Missing", "", new { @class = "text-danger" }, "")
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col">
                <small id="deliveryHelp" class="form-text text-muted text-right mt-0">
                    Optional
                </small>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text"><i class="fa fa-life-ring fa-fw" aria-hidden="true" title="Delivery instructions"></i></div>
                    </div>
                    @if (Model.BusinessSettings.DeliveryEnabled && !Model.IsPreOrder)
                    {
                        @Html.TextAreaFor(m => m.ProductOrder.DeliveryInstructions, new { @id = "delivery_instructions", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "110" })
                    }
                    else
                    {
                        @Html.TextAreaFor(m => m.ProductOrder.DeliveryInstructions, new { @id = "delivery_instructions", @class = "form-control", autocomplete = "off", autofocus = "autofocus", @tabindex = "110", disabled = "on" })
                    }
                </div>
                @Html.ValidationMessageFor(m => m.ProductOrder.DeliveryInstructions, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

</div>

    @Html.HiddenFor(h => h.ProductOrder.OrderID)
    @Html.HiddenFor(h => h.ProductOrder.ContactAddress, new { @id = "address_id" })
    @Html.HiddenFor(h => h.ProductOrder.CartID)
    @Html.HiddenFor(h => h.ProductOrder.Payment)
    @Html.HiddenFor(h => h.ProductOrder.Created)
    @Html.HiddenFor(h => h.ProductOrder.ConfirmationCode)
    @Html.HiddenFor(h => h.ProductOrder.Confirmed)
    @Html.HiddenFor(h => h.PreOrderSource, new { @id = "pre_order_source" })
    @if (Model.IsPreOrder)
    {
        @Html.Hidden("ProductOrder.PaymentMethod", "BANK")
    }

    <div class="clearfix mb-3">
        <div class="text-right float-right">
            <a class="btn btn-danger btn-lg" asp-page="/Cart/CartView"><i class="fa fa-times" aria-hidden="true" title="Cancel" tabindex="-1"></i> Cancel</a>
            <button id="review_order"
                    type="submit"
                    class="btn btn-success btn-lg block-form-submit-button"
                    tabindex="112">
                Review order <i class="fa fa-arrow-right" aria-hidden="true" title="Review order"></i>
            </button>
        </div>
    </div>
    }
